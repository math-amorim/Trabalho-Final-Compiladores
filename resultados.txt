Tokens gerados pela análise léxica:
[TInt,ID "maior",LPAR,TInt,ID "a",VIRG,TDouble,ID "b",RPAR,LCOL,IF,LPAR,ID "a",RGT,ID "b",RPAR,LCOL,Return,ID "a",PONTVIRG,RCOL,Return,ID "b",PONTVIRG,RCOL,LCOL,TInt,ID "a",VIRG,ID "b",PONTVIRG,TDouble,ID "x",VIRG,ID "y",PONTVIRG,ID "a",IGUAL,FLOAT 10.5,PONTVIRG,ID "x",IGUAL,FLOAT 10.5,PONTVIRG,ID "b",IGUAL,INT 2,MUL,ID "a",ADD,LPAR,TInt,RPAR,ID "x",MUL,INT 2,PONTVIRG,ID "y",IGUAL,ID "maior",LPAR,ID "a",VIRG,ID "b",RPAR,PONTVIRG,RCOL]


Árvore Abstrata gerada pela análise sintática:
Prog ["maior" :->: (["a" :#: (TINT,0),"b" :#: (TDOUBLE,0)],TINT)] [("maior",["a" :#: (TINT,0),"b" :#: (TDOUBLE,0)],[If (Rel (Rgt (IdVar "a") (IdVar "b"))) [Ret (Just (IdVar "a"))] [],Ret (Just (IdVar "b"))])] ["a" :#: (TINT,0),"b" :#: (TINT,0),"x" :#: (TDOUBLE,0),"y" :#: (TDOUBLE,0)] [Atrib "a" (Const (CFloat 10.5)),Atrib "x" (Const (CFloat 10.5)),Atrib "b" (Add (Mul (Const (CInt 2)) (IdVar "a")) (Mul (DoubleInt (IdVar "x")) (Const (CInt 2)))),Atrib "y" (Chama "maior" [IdVar "a",IdVar "b"])]


Resultados da análise semântica:
Adv: Conversão implícita de double para inteiro na expressão que vai ser retornada na função 'maior'.
Adv: Conversão implícita de Int para Double no primeiro operando IdVar "a"
Adv: Conversão implícita de double para inteiro na expressão dada: Const (CFloat 10.5)

Prog ["maior" :->: (["a" :#: (TINT,0),"b" :#: (TDOUBLE,0)],TINT)] [("maior",["b" :#: (TDOUBLE,0),"a" :#: (TINT,0)],[If (Rel (Rgt (IntDouble (IdVar "a")) (IdVar "b"))) [Ret (Just (IdVar "a"))] [],Ret (Just (DoubleInt (IdVar "b")))])] ["y" :#: (TDOUBLE,0),"x" :#: (TDOUBLE,0),"b" :#: (TINT,0),"a" :#: (TINT,0)] [Atrib "a" (DoubleInt (Const (CFloat 10.5))),Atrib "x" (Const (CFloat 10.5)),Atrib "b" (Add (Mul (Const (CInt 2)) (IdVar "a")) (Mul (DoubleInt (IdVar "x")) (Const (CInt 2)))),Atrib "y" (IntDouble (Chama "maior" [IdVar "a",IntDouble (IdVar "b")]))]
